---
title: "AACR Project GENIE {{release}} Data Guide"
format:
  pdf:
    toc: true
    number-sections: false
    colorlinks: true
    include-in-header:
      text: |
        \usepackage{titling}
        \usepackage{longtable}
        \pretitle{\begin{center}\LARGE\includegraphics[width=20cm]{genie_banner.png}\\[\bigskipamount]}
        \posttitle{\end{center}}
editor: source
date: today
author: "AACR"
jupyter: python3
---

```{python}
#| echo: false
#| include: false

# Setup
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from synapseclient import Synapse

import re

syn = Synapse()
syn.login()
params = {
    "release": "{{release}}",
    "project_id": "{{project_id}}"
}

def get_release_folder_synid(mapping_synid, release):
    mapping_df = syn.tableQuery(f"SELECT * FROM {mapping_synid}").asDataFrame()
    release_view_id = mapping_df[mapping_df["Database"] == "releaseFolder"]["Id"].values[0]

    if release == "TEST.consortium":
        release = "TESTING"
    elif release == "TEST.public":
        release = "TESTpublic"

    releases_df = syn.tableQuery(
        f"SELECT DISTINCT(name) AS releases FROM {release_view_id} WHERE name NOT LIKE 'Release%' AND name <> 'case_lists'"
    ).asDataFrame()

    if release not in releases_df["releases"].values:
        raise ValueError(f"Release {release} not found.")

    release_folder_df = syn.tableQuery(
        f"SELECT id FROM {release_view_id} WHERE name = '{release}'"
    ).asDataFrame()
    return release_folder_df["id"].values[0]


def get_file_mapping(release_folder_synid, syn):
    """Maps filenames to their Synapse IDs, renaming BED file."""
    children = syn.getChildren(release_folder_synid)
    file_mapping = {}

    for child in children:
        name = child["name"]
        if name == "genie_combined.bed":
            name = "genomic_information.txt"
        file_mapping[name] = child["id"]

    return file_mapping


def get_list_assay_info_table(allowed_values, assayinfodf, col):
    """Creates a matrix of X-marks for allowed values by SEQ_PIPELINE_ID."""
    assayinfodf = assayinfodf.copy()
    mask = assayinfodf[col].notna()
    seq_assays = assayinfodf.loc[mask, "SEQ_PIPELINE_ID"].unique()

    table = pd.DataFrame('', index=seq_assays, columns=allowed_values)

    for panel in seq_assays:
        str_value = assayinfodf.loc[assayinfodf["SEQ_PIPELINE_ID"] == panel, col].values[0]
        values = str_value.split(";")
        for val in values:
            if val in allowed_values:
                table.at[panel, val] = "X"

    return table

def get_oncotree_link(database_synid_mappingid, syn):
    """Fetches the OncoTree link used for the latest release."""
    df = syn.tableQuery(f"SELECT * FROM {database_synid_mappingid}").asDataFrame()
    row = df[df["Database"] == "oncotreeLink"]
    synid = row["Id"].values[0]
    ent = syn.get(synid, downloadFile=False)
    print(synid)
    print(ent)
    return ent['externalURL']


# Assumes `params` dict and Synapse client `syn` are already set
project_ent = syn.get(params["project_id"])
database_synid_mappingid = project_ent.annotations["dbMapping"][0]  # first value if list
release = params["release"]

# Get release folder synId using a previously defined function (already converted)
release_folder_synid = get_release_folder_synid(database_synid_mappingid, release)

# Get OncoTree link
oncotree_link = get_oncotree_link(database_synid_mappingid, syn)
print("OncoTree Link:", oncotree_link)

# Get release files mapping
release_files_mapping = get_file_mapping(release_folder_synid, syn)
```


# About this Document

```{python}
#| echo: false
#| results: asis
print(f"This document provides an overview of {params['release']} release\nof American Association for Cancer Research (AACR) GENIE data.")
```

# Version of Data

```{python}
#| echo: false
#| results: asis
print(f"AACR Project GENIE Data: Version {params['release']}")
```

AACR Project GENIE data versions follow a numbering scheme derived from [semantic versioning](https://semver.org/) where the digits in the version correspond to: major.patch-release-type. "Major" releases are public releases of new sample data. "Patch" releases are corrections to major releases, including data retractions. "Releasetype" refers to whether the release is a public AACR Project GENIE release or a private/consortium-only release. Public releases will be denoted with the nomenclature "X.X-public" and consortium-only private releases will be denoted with the nomenclature "X.X-consortium".

# Data Access

AACR Project GENIE Data is currently available via two mechanisms:

-   Synapse Platform (Sage Bionetworks): https://genie.synapse.org/

-   cBioPortal for Cancer Genomics (MSK): https://www.cbioportal.org/genie/

# Terms Of Access

All users of the AACR Project GENIE data must agree to the following terms of use; failure to abide by any term herein will result in revocation of access.

-   Users will not attempt to identify or contact individual participants from whom these data were collected by any means.

-   Users will not redistribute the data without express written permission from the AACR Project GENIE Coordinating Center (send email to: genieinfo\@aacr.org).

When publishing or presenting work using or referencing the AACR Project GENIE dataset please include the following attributions:

-   Please cite: *The AACR Project GENIE Consortium. AACR Project GENIE: Powering Precision Medicine Through An International Consortium, Cancer Discov. 2017 Aug;7(8):818-831* and include the version of the dataset used.

-   The authors would like to acknowledge the American Association for Cancer Research and its financial and material support in the development of the AACR Project GENIE registry, as well as members of the consortium for their commitment to data sharing. Interpretations are the responsibility of study authors.

Posters and presentations should include the AACR Project GENIE logo.

# Introduction to AACR GENIE

The AACR Project Genomics, Evidence, Neoplasia, Information, Exchange (GENIE) is a multi-phase, multi-year, international data-sharing project that aims to catalyze precision cancer medicine. The GENIE platform will integrate and link clinical-grade cancer genomic data with clinical outcome data for tens of thousands of cancer patients treated at multiple international institutions. The project fulfills an unmet need in oncology by providing the statistical power necessary to improve clinical decision-making, to identify novel therapeutic targets, to understand of patient response to therapy, and to design new biomarker-driven clinical trials. The project will also serve as a prototype for aggregating, harmonizing, and sharing clinical-grade, next-generation sequencing (NGS) data obtained during routine medical practice.

The data within GENIE is being shared with the global research community. The database currently contains CLIA-/ISO-certified genomic data obtained during the course of routine practice at multiple international institutions (Table 1), and will continue to grow as more patients are treated at additional participating centers.
```{python}
#| echo: false
#| include: false

# Load assay information
# assay_file_id = syn.getChildren(release_folder_synid, includeTypes=["file"])
assay_synid = release_files_mapping["assay_information.txt"]

# Download the file from Synapse (follow link if it's a file entity with link)
assayinfo_entity = syn.get(assay_synid, followLink=True)
assayinfodf = pd.read_csv(assayinfo_entity.path, sep="\t")

# Extract unique center abbreviations
processed_centers = assayinfodf["CENTER"].unique()

# Create SQL WHERE clause
center_filter = "', '".join(processed_centers)
query = (
    f'SELECT "Center Abbreviation", "Center" '
    f'FROM syn16982837 '
    f'WHERE "Center Abbreviation" IN (\'{center_filter}\')'
)

# Execute Synapse table query
centers_table = syn.tableQuery(query, includeRowIdAndRowVersion=False)
centers_df = centers_table.asDataFrame()
```

```{python, echo=F}
#| echo: false
#| tbl-cap: "Participating Centers"

from IPython.display import display, Latex

latex_table = centers_df.to_latex(
    index=False,
    longtable=True,
    escape=True,
    column_format="p{2.5cm}p{12cm}",  # Adjust column widths here
    caption="Participating Centers"
)
display(Latex(latex_table))
```


# Human Subjects Protection and Privacy

Protection of patient privacy is paramount, and the AACR Project GENIE therefore requires that each participating center share data in a manner consistent with patient consent and center-specific Institutional Review Board (IRB) policies. The exact approach varies by center, but largely falls into one of three categories: IRB-approved patient-consent to sharing of de-identified data, captured at time of molecular testing; IRB waivers and; and IRB approvals of GENIE-specific research proposals. Additionally, all data has been de-identified via the HIPAA Safe Harbor Method. Full details regarding the HIPAA Safe Harbor Method are available online at: https://www.hhs.gov/hipaa/for-professionals/privacy/special-topics/de-identification/.

# Data Hamonization & QC Process

The GENIE dataset is generated from data curated by multiple cancer centers. Each center prepares their data by uploading their files onto the Synapse platform.

**Required files:**

-   Clinical patient and sample data
-   Variant data (MAF or VCF file)
-   Assay information
-   Genomic regions data (BED file)

**Optional files:**

-   Structural variant data
-   Segmented data
-   Discrete copy number data
-   Mutations in cis data
-   Sample and/or patient retraction file

Only validated files that adhere to the submission guidelines will be pushed to the release. The files that do not pass these validation checks will not be processed and an email notifying any errors or warnings will be sent to each center to correct. Each accepted file type has its own submission guidelines the centers must follow. Some examples of these validation checks are given below:

-   assay information file: `SEQ_ASSAY_ID`s must start with the center abbreviation.
-   BED file: `Start_Position` must only be integers and is the 2nd column.
-   MAF file: `T_ALT_COUNT` must be an integer.

Every month the center files are merged and processed into the release files. During processing, specific sample and variant filters and transformations are applied to the each center's validated files. After processing, the release files go through some manual and automated review processes.

For more information on the filters and review processes, see below.

## Sample Filters

[Sequence Date]{.underline}

Samples from every major release and its associated consortium releases are vetted by its `SEQ_DATE`. For instance, samples in the 5.0 consortium and public releases will only contain samples that were sequenced prior to Jan-2018 (not including Jan-2018)

[No BED file]{.underline}

Samples that have a `SEQ_ASSAY_ID`, but don't have a bed file associated with them will be removed.

[Oncotree]{.underline}

Samples with deprecated codes (as defined by the oncotree source version used in the release) will be removed.

[Patient and sample retractions]{.underline}

-   Implicit retraction occurs when data removed from new uploads is automatically excluded from future releases.
-   Explicit retraction occurs when centers submit a retraction file containing a patient or sample ID, often due to a patient's decision to withdraw their consent.

[Age information redaction]{.underline}

When `AGE_AT_SEQ_REPORT`, `INT_CONTACT`, or `INT_DOD` is \>32485 or <6570 days, the fields `BIRTH_YEAR`, `YEAR_CONTACT`, `YEAR_DEATH`, `INT_CONTACT`, `INT_DOD`, and `AGE_AT_SEQ_REPORT` are redacted. If the difference between the `BIRTH_YEAR` and `YEAR_CONTACT` or `BIRTH_YEAR` and `YEAR_DEATH` is greater than 89 years, those values will be redacted.

-   Intervals are redacted with "\>32485" and "<6570"
-   Ages are redacted with "\>89" and "<18"
-   Years are marked as "cannotReleaseHIPAA" for individuals over 89 and as "withheld" for individuals under 18

## Variant Data Filters

[Germline Filter]{.underline}

-   All germline variants are filtered out in all releases.
    -   We added a whitelist of GRCh37 loci where pathogenic somatic events are known to occur. The whitelist can be viewed [here](https://raw.githubusercontent.com/mskcc/vcf2maf/v1.6.19/data/known_somatic_sites.bed).
-   Genome Nexus reports gnomAD AFs by querying the Genome Aggregation Database to determine common variants. An additional filter named common_variant is also appended if allele count across at least one ExAC subpopulation is \>10 (this default cutoff can be changed when running vcf2maf). If any variant has a max gnomAD AF from any subpopulation that is over 0.0005, the variant will be filtered out. This \>10 allele count (AC) cutoff was selected because it tagged no more than 1% of the somatic calls across all MSK-IMPACT samples with patient-matched controls.
    -   So if you're handling somatic variants, the common_variant tag means this is likely a false-positive. It is less likely to be a legit somatic variant at a site that ExAC classifies as germline or artifact.
-   While the GENIE data available from Sage contains all mutation data, the following mutation types are automatically altered upon import into the cBioPortal: Silent, Intronic, 3' UTR, 3' Flank, 5' UTR, 5' Flank and Intergenic region (IGR).
-   Seventeen of the nineteen GENIE participating centers performed tumor-only sequencing i.e. without also sequencing a patient-matched control sample like blood, to isolate somatic events. These centers minimized artifacts and germline events using pooled controls from unrelated individuals, or using databases of known artifacts, common germline variants, and recurrent somatic mutations. However, there remains a risk that such centers may inadvertently release germline variants that can theoretically be used for patient re-identication. To minimize this risk, the GENIE consortium developed a stringent germline filtering pipeline, and applied it uniformly to all variants across all centers.
    -   Hotspots from Chang et al. minus some likely artifacts. (http://dx.doi.org/10.1038/nbt.3391)
    -   Somatic mutations associated with clonal hematopoietic expansion from Xie et al. (http://dx.doi.org/10.1038/nm.3733) 
    -   Somatically mutable germline sites at MSH6:F1088, TP53:R290, TERT:E280, ASXL1:G645_G646.

[MAF in BED]{.underline}

Any variants in the mutation file that isn't described by the bed file will be filtered out

[Mutations-in-cis]{.underline}

Samples that have variants that could be merged together will be filtered out. This filter looks for close proximity variants (within 6bp) and difference of variant allele frequency between two variants (\<0.05). Sites review the variants that are filtered out and select one of the three options for this filter:

-   ON: Sage filters out all samples with variants flagged
-   OFF: If a center already does this filter prior to upload, the filter can be turned off
-   FLAG: The samples are not removed, but the variants are annotated in the maf file. (Discussed May 6th, 2019)

[Genome Nexus Annotation Status]{.underline}

Mutation data that fails to be annotated by Genome-Nexus is excluded from the release. For example, this occurs when the allele extracted from the VCF or MAF file does not match the reference allele, or when the VEP tool that Genome-Nexus uses is unable to annotate the data.

## Processing Transformations

[Genome Nexus Annotation Pipeline]{.underline}: https://genie.genomenexus.org/

-   Contributing GENIE centers provided mutation data in Variant Call Format (VCF) or Mutation Annotation Format (GDC MAF v1.0.0) with additionalfields for read counts supporting variant alleles, reference alleles, and total depth. Some "MAF-like" text files with minimal required columns were also received from the participating centers. These various input formats were converted into a complete tab-separated MAF format, with Genome Nexus.
-   The GENIE dataset is annotating all variants with Genome Nexus starting from the 9.1-consortium release (instead of vcf2maf).

[Gene symbol harmonization]{.underline}

All submitted HUGO gene symbols will be harmonized against GRCh37 by checking the coordinates against the annotation.

-   Every single row of the bed file will be matched against the gene database. If the submitted symbol matches a row in the gene database and there is an overlap from the submitted bed region, the submitted symbol will be returned.
-   If the submitted symbol does not exist in the database or there is not any overlap, an attempt to find any gene that completely encapsulates the submitted bed region is made. If the bed region is contained completely inside one gene, then it is labelled as that gene. If a bed region is enclosed completely in more than one gene, and the submitted symbol doesn't match any of the genes returned, NULL will be returned.
-   If the submitted region isn't enclosed in any gene, then calculations are made to check if the bed region resides at least 90% in a gene. If there is more than one gene returned while doing 90% boundary calculations, NULL is returned.

[CNA Value Harmonization]{.underline}

On a per site basis, if there are more two rows that are the same gene, the values are updated using the following logic:

-   If there is one value, keep that value
-   If there are two values (e.g. 2 or 0), we take the non-zero value.
-   If there are two values that aren't zero (e.g. 1 and 2), it is NA.
-   If there are more than two values (e.g. 0 or 1 or 2), it is NA.

[Clinical Tier Release Scope Filters]{.underline}

Some parts of the clinical data is masked from the public releases. This is based on a clinical tier release scope of release document determined by the consortium.

## Post-Release Quality Checks

[GENIE-ArtifactFinder]{.underline}

Finds potential genomic artifacts by filtering unique variants for which counts in a given panel \>= 10, and counts aggregated from all other panels is \< 10 for which there are \>= 3 different panels that cover the variant in question.

The resulting set is annotated with a fisher p-value for the variants that pass this filtering:

+--------------------------------------------------------------------------+-------------------------------------------------------------+
| Number of variants called in panel                                       | Number of samples for this panel                            |
+==========================================================================+=============================================================+
| Number of variants called in other panels with coverage for this variant | Number of samples for panels with coverage for this variant |
+--------------------------------------------------------------------------+-------------------------------------------------------------+

[Release Report]{.underline}

After release, each center performs a manual review of their data based on an auto-generated dashboard that summarizes some key elements. Some examples of items sites review are given below:

-   Confirm sample count.
-   Confirm variant count (flagged mutations). Most of these variants are potential artifacts flagged by manual review of cBioPortal. Suggestions for variants that should be part of this list or any variant shouldn't be part of this list are welcome.
-   Fix BED and assay information discrepancies.
-   Confirm top 5 most frequently mutated genes per pipeline for all non-synonymous mutations.
-   Remove blacklisted variants.
-   Confirm clinical attribute distributions/values are valid.
-   Confirm patients and samples that were marked for retraction.
-   Review failed annotations flagged by Genome-Nexus.
# Summary of Sequence Pipeline

Traditionally, the SEQ_ASSAY_ID was used as an institution's identifier for their assays when each assay had one associated gene panel. As GENIE grew, we wanted to support an assay having multiple gene panels. SEQ_ASSAY_ID was repurposed to be an identifier for a center's assay OR panel. For those centers that have multiple panels per assay, we introduced SEQ_PIPELINE_ID (pipeline), which encompasses multiple SEQ_ASSAY_ID (panel).

```{python}
#| echo: false
#| include: false

# Drop duplicates by SEQ_PIPELINE_ID, keeping the first occurrence
pipelinedf = assayinfodf.drop_duplicates(subset="SEQ_PIPELINE_ID")

# Get unique list of centers
processed_centers = assayinfodf["CENTER"].unique()
```

```{python}
#| echo: false
sns.countplot(data=pipelinedf, x="CENTER", order=pipelinedf["CENTER"].value_counts().index)
plt.xticks(rotation=90)
plt.title("Number of Pipelines per Center")
plt.xlabel("Center")
plt.ylabel("Pipeline Count")
plt.tight_layout()
plt.show()
```

```{python}
#| echo: false

# Set seaborn theme similar to theme_bw()
sns.set_theme(style="whitegrid")

# Create a 2x2 subplot grid
fig, axes = plt.subplots(2, 2, figsize=(14, 10))

# Plot 1: Library Selection
sns.countplot(data=pipelinedf, x="library_selection", ax=axes[0, 0])
axes[0, 0].set_title("A")
axes[0, 0].set_xlabel("Library Selection")
axes[0, 0].set_ylabel("# of Pipelines")
axes[0, 0].tick_params(axis='x', rotation=45)

# Plot 2: Library Strategy
sns.countplot(data=pipelinedf, x="library_strategy", ax=axes[0, 1])
axes[0, 1].set_title("B")
axes[0, 1].set_xlabel("Library Strategy")
axes[0, 1].set_ylabel("# of Pipelines")
axes[0, 1].tick_params(axis='x', rotation=45)

# Plot 3: Platform
sns.countplot(data=pipelinedf, x="platform", ax=axes[1, 0])
axes[1, 0].set_title("C")
axes[1, 0].set_xlabel("Platform")
axes[1, 0].set_ylabel("# of Pipelines")
axes[1, 0].tick_params(axis='x', rotation=45)

# Plot 4: Specimen Tumor Cellularity
sns.countplot(data=pipelinedf, x="specimen_tumor_cellularity", ax=axes[1, 1])
axes[1, 1].set_title("D")
axes[1, 1].set_xlabel("Specimen Tumor Cellularity")
axes[1, 1].set_ylabel("# of Pipelines")
axes[1, 1].tick_params(axis='x', rotation=45)

# Adjust layout
plt.tight_layout()
plt.show()
```

```{python}
#| echo: false
#| tbl-cap: "Coverage per panel"

allowed_coverage = ['hotspot_regions', 'coding_exons', 'introns', 'promoters']

coverage_per_panel = get_list_assay_info_table(
    allowed_values=allowed_coverage,
    assayinfodf=pipelinedf,
    col="coverage"
)

latex_table = coverage_per_panel.to_latex(
    longtable=True,
    escape=True,
    caption="Coverage per panel"
)
display(Latex(latex_table))
```


```{python}
#| echo: false
#| tbl-cap: "Alteration Types per Panel/Pipeline"

allowed_alterations = ["snv", "small_indels", "gene_level_cna",
                       "intragenic_cna", "structural_variants"]

alterations_per_panel = get_list_assay_info_table(
    allowed_values=allowed_alterations,
    assayinfodf=pipelinedf,
    col="alteration_types"
)

# Display the table
latex_table = alterations_per_panel.to_latex(
    longtable=True,
    escape=True,
    caption="Alteration Types per Panel/Pipeline"
)
display(Latex(latex_table))
```

```{python}
#| echo: false
#| tbl-cap: "Preservation Techniques per Panels/Pipelines"

allowed_specimen_types = ["FFPE", "fresh_frozen"]

specimen_per_panel = get_list_assay_info_table(
    allowed_values=allowed_specimen_types,
    assayinfodf=pipelinedf,
    col="preservation_technique"
)

latex_table = specimen_per_panel.to_latex(
    longtable=True,
    escape=True,
    caption="Preservation Techniques per Panels/Pipelines"
)
display(Latex(latex_table))
```

```{python}
#| echo: false
#| tbl-cap: "Sequence Assay Genomic Information"

# Select relevant columns
columns = ["SEQ_ASSAY_ID", "calling_strategy", "number_of_genes", "target_capture_kit"]
gene_number_info = assayinfodf[columns].copy()

# Convert number_of_genes to integer (if needed)
gene_number_info["number_of_genes"] = pd.to_numeric(gene_number_info["number_of_genes"], errors="coerce").astype("Int64")

# Sort by SEQ_ASSAY_ID
gene_number_info_sorted = gene_number_info.sort_values(by="SEQ_ASSAY_ID")

# Rename columns for display
gene_number_info_sorted.columns = [
    "Sequencing Assay", "Calling Strategy", "Number of genes", "Target Capture Kit"
]

# Output to Quarto (Quarto will handle rendering for PDF/HTML)
latex_table = gene_number_info_sorted.to_latex(
    longtable=True,
    escape=True,
    caption="Sequence Assay Genomic Information",
    index=False,
    column_format="p{3.2cm}p{3.2cm}p{2.2cm}p{6.4cm}"
)
display(Latex(latex_table))
```

# Genomic Profiling at Each Center

```{python}
from IPython.display import Markdown

for center in sorted(processed_centers):
    with open(f'genomic_profiles/{center.lower()}.qmd') as f:
        content = f.read()
        display(Markdown(content))
```

<!--
```{r}
#| eval: true
#| echo: false
#| results: asis

for (center in sort(processed_centers)) {
  center = tolower(center)
  a <- knitr::knit_child(glue::glue('genomic_profiles/{center}.qmd'), quiet=T)
  cat(a, sep="\n")
}

```
-->

# Description of Data Files

Description on most of the data files can be found in the [cBioPortal file formats](https://docs.cbioportal.org/file-formats) docs.

[data_mutations_extended.txt]{.underline}

* Description: The mutation data file expands the Mutation Annotation Format (MAF) developed by the Cancer Genome Atlas project by including additional annotations for each mutation record.
* Details: [MAF format](https://docs.cbioportal.org/file-formats/#mutation-data)

[data_clinical_patient.txt/data_clinical_sample.txt]{.underline}

* Description: The clinical data file is used to capture both clinical attributes and the mapping between patient and sample IDs.
* Details: [Clinical format](https://docs.cbioportal.org/file-formats/#clinical-data)

[data_CNA.txt]{.underline}

* Description: The copy number data file contain values that would be derived from copy-number analysis algorithms like GISTIC or RAE. GISTIC can be installed or run online using the GISTIC 2.0 module on GenePattern.
* Details: [CNA format](https://docs.cbioportal.org/file-formats/#discrete-copy-number-data)

[data_sv.txt]{.underline}

* Description: The structural variant file contains information on structural variants. This file format replaces the deprecated data_fusions.txt file format.
* Details: [Structural Variant format](https://docs.cbioportal.org/file-formats/#structural-variant-data)

[genomic_information.txt]{.underline}

* Description: The genomic information file describes genomic coordinates covered by all platforms contributed to GENIE. This is used in the inBED filter and to generate gene panel files.
  * `Chromosome`, `Start_Position`, `End_Position`: Gene positions
  * `Hugo_Symbol`: Re-mapped gene symbol based on gene positions
  * `ID`: Center submitted gene symbols
  * `SEQ_ASSAY_ID`: The institutional assay identifier for genomic testing platform. Feature_Type: "exon", "intron", or "intergenic"
  * `includeInPanel`: Used to define gene panel files for cBioPortal.
  * `clinicalReported`: These are the genes that were clinically Reported. Blank means information not provided.

[assay_information.txt]{.underline}

* Description: This describes the genomic profile information for each assay and is used to auto write the Summary of Sequence Pipeline section of the data guide.
* Details: This is not a cBioPortal file format
  * `SEQ_ASSAY_ID`: The assay identifier for the genomic testing platform
  * `is_paired_end`, `library_selection`, `library_strategy`, `platform`, `read_length`, `target_capture_kit`, `instrument_model`: defined by [GDC read group](https://docs.gdc.cancer.gov/Data_Dictionary/viewer/#?view=table-definition-view&id=read_group)
  * `number_of_genes`: Number of genes from which variants are called.
  * `variant_classifications`: List of types of variants that are reported for this assay.
  * `gene_padding`: Number of base pairs to add to exon endpoints for the inBED filter.
  * `alteration_types`: List of alteration types.
  * `preservation_technique`: Either FFPE, fresh_frozen, or NA.
  * `specimen_tumor_cellularity`: Tumor Cellularity Cutoff.
  * `calling_strategy`: Tumor only or tumor normal.
  * `coverage`: List of coverage types.
  * `SEQ_PIPELINE_ID`: For those centers that have multiple panels per assay (multiple `SEQ_ASSAY_ID`s)

[data_cna_hg19.seg]{.underline}

* Description: A SEG file (segmented data; .seg or .cbs) is a tab-delimited text file that lists loci and associated numeric values. The segmented data file format is the output of the Circular Binary Segmentation algorithm (Olshen et al., 2004).
* Details: [SEG format](https://docs.cbioportal.org/file-formats/#segmented-data)

[data_gene_matrix.txt]{.underline}

* Description: This file contains a mapping between `SAMPLE_ID` and `SEQ_ASSAY_ID`. This assumes the type of genomic data extracted for the sample based on the associated SEQ_ASSAY_ID.
* Details: [Gene Matrix format](https://docs.cbioportal.org/file-formats/#gene-panel-matrix-file)

[data_gene_panel_* files]{.underline}

* Description: These files specify which genes are assayed on a panel and assign samples and genetic profiles (such as mutation data) to a panel.
* Details: [Gene panel format](https://docs.cbioportal.org/file-formats/#gene-panel-data)

[release_notes.pdf]{.underline}

* Description: Detailed release notes for each release.

[meta_* files]{.underline}

* Description: Metadata files required for import into cBioPortal.
* Details: Each cBioPortal file format has an associated meta file.

[case_lists files]{.underline}

* Description: Case lists are used to define sample lists that can be selected on the query page. Each case list file has the naming format cases_{type}.txt and is located in the case_lists folder found under each GENIE release.
* Details: [Case list format](https://docs.cbioportal.org/file-formats/#case-lists)

<!-- : GENIE Data Files {tbl-colwidths="\[35,35,30\]"} This is the control table col widths-->

# Description of Clinical Data Fields

[data_clinical_patient.txt]{.underline}

`PATIENT_ID`

* Expected Values: GENIE-[CENTER]-[patient identifier]
* Data Description: The unique, anonymized patient identifier for the GENIE project. The first component is the string, "GENIE"; the second component is the Center abbreviation. The third component is an anonymized unique identifier for the patient.

`SEX`

* Expected Values: Female, Male, Other, Transsexual, Not Collected, Unknown
* Data Description: The patient's sex code; this data element derives from NAACCR v16, Element #220.

`PRIMARY_RACE`

* Expected Values: Asian, Black, Native American, Not Applicable, Not Collected, Other, Unknown, Pacific Islander, White
* Data Description: The primary race recorded for the patient; this data element derives from NAACCR v16, Element #160. For institutions collecting more than one race category, this race code is the primary race for the patient. Institutions not collecting race have set this field to Not Collected.

`SECONDARY_RACE` [Not available for public releases]

* Expected Values: Asian, Black, Native American, Not Applicable, Not Collected, Other, Unknown, Pacific Islander, White
* Data Description: The secondary race recorded for the patient; this data element derives from NAACCR v16, Element #161. Institutions not collecting race have set this field to Not Collected.

`TERTIARY_RACE` [Not available for public releases]

* Expected Values: Asian, Black, Native American, Not Applicable, Not Collected, Other, Unknown, Pacific Islander, White
* Data Description: The tertiary race recorded for the patient; this data element derives from NAACCR v16, Element #162. Institutions not collecting race have set this field to Not Collected.

`ETHNICITY`

* Expected Values: Non-Spanish/non-Hispanic, Spanish/Hispanic, Unknown, Not Collected
* Data Description: Indication of Spanish/Hispanic origin of the patient; this data element derives from NAACCR v16, Element #190. Institutions not collecting Spanish/Hispanic origin have set this column to Not Collected.

`BIRTH_YEAR` [Not available for public releases]

* Expected Values: [Integer], Unknown, cannotReleaseHIPAA, withheld
* Data Description: The four-digit year corresponding to the patient's birth date.

`CENTER`

* Expected Values: The center abbreviation (e.g. MSK, DFCI, UHN)
* Data Description: The center submitting the clinical and genomic data.

`INT_CONTACT`

* Expected Values: [Integer], <6570, >32485, Not Collected, Not Released, Unknown
* Data Description: Interval in days from date of birth (DOB) to date of last contact.

`INT_DOD`

* Expected Values: [Integer], <6570, >32485, Not Collected, Not Released, Not Applicable, Unknown
* Data Description: Interval in days from date of birth (DOB) to date of death (DOD).

`YEAR_CONTACT`

* Expected Values: [Integer], <18, >89, Not Collected, Not Released, Unknown
* Data Description: Record of the year the patient is last known to be alive, as determined from electronic health records (EHR), tumor registries, or other relevant systems.

`YEAR_DEATH`

* Expected Values: [Integer], <18, >89, Not Collected, Not Released, Not Applicable, Unknown
* Data Description: Year of death.

`DEAD`

* Expected Values: TRUE, FALSE, Not Collected, Not Released, Not Applicable, Unknown
* Data Description: The patient's vital status.

[data_clinical_sample.txt]{.underline}

`SAMPLE_ID`

* Expected Values: GENIE-[CENTER]-[patient identifier]-[sample identifer]
* Data Description: The unique, anonymized sample identifier for the GENIE project. The first component is the string, "GENIE"; the second component is the Center abbreviation. The third component is an anonymized, unique patient identifier. The fourth component is a unique identifier for the sample that will distinguish between two or more specimens from a single patient.

`AGE_AT_SEQ_REPORT`

* Expected Values: [Integer], <18, >89, Unknown
* Data Description: The age of the patient at the time that the sequencing results were reported.

`AGE_AT_SEQ_REPORT_DAYS` [Not available for public releases]

* Expected Values: [Integer], >32485, <6570, Unknown
* Data Description: The interval in days between the patient's date of birth and the date of the sequencing report that is associated with the sample.  The interval is masked for >32485 and <6570.

`ONCOTREE_CODE`

* Expected Values:
    http://oncotree.mskcc.org/#/home?version=`r strsplit(oncotree_link, "=")[[1]][2]`
* Data Description: The primary cancer diagnosis, or "main type", classified based on the OncoTree ontology. The version of the OncoTree ontology used for this release is `r strsplit(oncotree_link, "=")[[1]][2]`.

`SAMPLE_TYPE`

* Expected Values: Primary, Metastasis, Unspecified, Not Applicable or Heme, Not Collected
* Data Description: The specimen's sample type based on its location.

`SAMPLE_TYPE_DETAILED`

* Expected Values: Primary tumor, Metastasis site unspecified, Local recurrence, Lymph node metastasis, Not applicable or hematologic malignancy, Distant organ metastasis, Not Collected, Not otherwise specified
* Data Description: The specimen's detailed sample type based on its location.

`SEQ_ASSAY_ID`

* Expected Values: [Center]-[Panel]
* Data Description: The institutional assay identifier for genomic testing platform. Components are separated by hyphens, with the first component corresponding to the Center's abbreviation. All specimens tested by the same platform should have the same identifier.

`CANCER_TYPE`

* Expected Values: Non-Small Cell Lung Cancer (example)
    http://oncotree.mskcc.org/#/home?version=`r strsplit(oncotree_link, "=")[[1]][2]`
* Data Description: The primary cancer diagnosis label, or "main type", based on the OncoTree ontology. For example, the OncoTree code of LUAD maps to: “Non-Small Cell Lung Cancer”.

`CANCER_TYPE_DETAILED`

* Expected Values: Lung Adenocarcinoma (example)
    http://oncotree.mskcc.org/#/home?version=`r strsplit(oncotree_link, "=")[[1]][2]`
* Data Description: The detailed primary cancer diagnosis label based on the OncoTree ontology. For example, the OncoTree code of LUAD maps to the label: "Lung Adenocarcinoma (LUAD)".

`SAMPLE_CLASS` [Not available for public releases]

* Expected Values: Tumor, cfDNA
* Data Description: Annotate samples as Tumor or cfDNA samples. cfDNA samples are publicly available starting from the 17.0-public release and onward.

`SEQ_YEAR` [Not available for public releases]

* Expected Values: [Integer]
* Data Description: The year the sample was sequenced.


### Linking clinical data to genomic data

* Link between `data_clinical_patient.txt` and `data_clinical_sample.txt`:
  * Column in `data_clinical_patient.txt`: PATIENT_ID
  * Column in `data_clinical_sample.txt`: PATIENT_ID

* Link between `data_clinical_sample.txt` and `data_mutations_extended.txt`:
  * Column in `data_clinical_sample.txt`: SAMPLE_ID
  * Column in `data_mutations_extended.txt`: Tumor_Sample_Barcode

* Link between `data_clinical_sample.txt` and `data_sv.txt`:
  * Column in `data_clinical_sample.txt`: SAMPLE_ID
  * Column in `data_sv.txt`: Tumor_Sample_Barcode

* Link between `data_clinical_sample.txt` and `genie_data_cna_hg19.seg`:
  * Column in `data_clinical_sample.txt`: SAMPLE_ID
  * Column in `genie_data_cna_hg19.seg`: ID

* Link between `data_clinical_sample.txt` and `genomic_information.txt`:
  * Column in `data_clinical_sample.txt`: SEQ_ASSAY_ID
  * Column in `genomic_information.txt`: SEQ_ASSAY_ID


### Center Strategies for OncoTree Assignment

Cancer types are reported using the OncoTree ontology originally developed at Memorial Sloan Kettering Cancer Center. This release uses the OncoTree version `r strsplit(oncotree_link, "=")[[1]][2]`. The centers participating in GENIE applied the OncoTree cancer types to the tested specimens in a variety of methods depending on center-specific workflows. Here is a brief description of how the cancer type assignment process for each center is specified.

* CHOP: Diagnosis assigned by Pathologist, and confirmed through genomic diagnostics. Mapped to oncotree by clinical oncologist and medical geneticist.
* CRUK: Molecular pathologists assigned diagnosis and mapped to OncoTree cancer type.
* COLU: Original diagnosis from pathologist was mapped to OncoTree diagnosis by medical oncologist and research manager
* DFCI: Molecular pathologists assigned diagnosis and mapped to OncoTree cancer type
* DUKE: Anatomic and molecular pathologists assigned diagnosis and mapped to OncoTree cancer type.
* GRCC: OncoTree cancer types were mapped from ICD-O codes. If no ICD-O code was available, a staff scientist and an oncologist mapped the diagnosis made by the pathologist to OncoTree cancer type.
* JHU: Molecular pathologists assigned diagnosis and mapped to OncoTree cancer type.
* MDA: OncoTree cancer types were mapped from ICD-O codes.
* MSK: Molecular pathologists assigned diagnosis and mapped to OncoTree cancer type.
* NKI: Molecular pathologists assigned diagnosis and mapped to OncoTree cancer type.
* PROV: Pathology PhD assigns OncoTree code after reviewing patholoy report. Pathologist (MD) adjusts OncoTree code as needed prior to sign out.
* SCI: Original diagnosis from the pathology report was mapped to OncoTree diagnosis by a research coordinator and molecular pathologist.
* UCHI: The original diagnosis was mapped to OncoTree by molecular pathologists.
* UCSF: The original diagnosis was mapped to OncoTree by molecular pathologists from the Clinical Cancer Genomics Laboratory.
* UHN: The original diagnosis was mapped to OncoTree by a medical oncologist and research manager
* UMIAMI: The original diagnosis and diagnosis site was programmatically mapped to OncoTree, then validated by a medical oncologist.
* VHIO: Original diagnosis from pathologist or medical oncologist was mapped to OncoTree diagnosis by research data curator
* VICC: OncoTree cancer types were mapped from ICD-O codes. If no ICD-O code was available, a research manager mapped the diagnosis to an OncoTree cancer type.
* WAKE: Diagnoses from Foundation Medicine and Caris Diagnostics to ICD-O-3, then mapped from ICD-O-3 to Oncotree.
* YALE: Molecular pathologists assigned diagnosis and mapped to OncoTree cancer type.


# Abbreviations and Acronym Glossary

For center abbreviations please see Table 1.

+------------------+-----------------------------------------------------------------+
| **Abbreviation** | **Full Term**                                                   |
+==================+=================================================================+
| AACR             | American Association for Cancer Research, Philadelphia, PA, USA |
+------------------+-----------------------------------------------------------------+
| CNA              | Copy number alterations                                         |
+------------------+-----------------------------------------------------------------+
| CNV              | Copy number variants                                            |
+------------------+-----------------------------------------------------------------+
| FFPE             | Formalin-fixed, paraffin-embedded                               |
+------------------+-----------------------------------------------------------------+
| GENIE            | Genomics, Evidence, Neoplasia, Information, Exchange            |
+------------------+-----------------------------------------------------------------+
| HIPAA            | Health Insurance Portability and Accountability Act             |
+------------------+-----------------------------------------------------------------+
| IRB              | Institutional Review Board                                      |
+------------------+-----------------------------------------------------------------+
| MAF              | Mutation annotation format                                      |
+------------------+-----------------------------------------------------------------+
| NAACCR           | North American Association of Central Cancer Registries         |
+------------------+-----------------------------------------------------------------+
| NGS              | Next-generation sequencing                                      |
+------------------+-----------------------------------------------------------------+
| PCR              | Polymerase chain reaction                                       |
+------------------+-----------------------------------------------------------------+
| SNP              | Single-nucleotide polymorphism                                  |
+------------------+-----------------------------------------------------------------+
| SNV              | Single-nucleotide variants                                      |
+------------------+-----------------------------------------------------------------+
| VCF              | Variant Call Format                                             |
+------------------+-----------------------------------------------------------------+
| SV               | Structural variants                                             |
+------------------+-----------------------------------------------------------------+